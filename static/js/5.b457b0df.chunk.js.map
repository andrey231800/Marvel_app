{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","a","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.b457b0df.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\n    const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\n    const _baseOffset = 210;\n\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    // Вариант модификации готового метода для поиска по имени. \n    // Вызывать его можно вот так: getAllCharacters(null, name)\n\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n    //     return res.data.results.map(_transformCharacter);\n    // }\n\n    // Или можно создать отдельный метод для поиска по имени\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}"],"sourceRoot":""}